---
layout: post
title:  "SCALE - Day 2 Notes"
date:   2018-03-10
---

## Attaca: Git-esque Version Control for Absurd Quantities of Data ##
* [Summary][attaca-summary]

* Git LFS - stores large files outside of Git, in external server. So not
  actually part of the Git repo.
* Add multi-blog files (at a certain size threshold. Can share smaller blobs
  between files
* Blobs are stored in object store (could use sharded K/V store like Cassandra)
* Ref store sits next to object store to guarantee consistency
* Why will it handle such large files? It can offload them to storage system.
  Hash-splitting
* Ceph/RADOS is used at CERN handling multiple petabytes of data
* Hashsplitting means even very large files are efficiently stored between
  mutations
* Alternative object stores:
    * Cassandra/Scylla?
    * dat?
* Alternative ref stores:
    * [Vmware Haret?][vmware-haret]
* Will have pluggable frontends too. Attaca + Subito
* Subito: highly work-in-progress Git-like frontend for Attaca
* Attaca: content addressable storage w/ upgradeable/multi-hash support
* Attaca kinda like IPFS seems like..
* Considering RDF for extensible commit metadata (how dataset was generated)

## Bacon Flavored Open Source Do's and Don'ts
* [Summary][bacon-summary]
* Jono: Ubuntu Community Manager, worked with GitHub and Xprize, O'Reilly, Forbes,
  Huawei, Google, Microsoft, Deutsche Bank..
* Trial and Error
    * _must_ experiment, there's no hard recipes for this stuff
    * therefore some things are going to fail, so have to set expectations

### Lessons Learned
* Openness/Transparency
    * GitLab debacle example, but they were completely open and the community
      rallied behind them. Live youtube stream, google doc, etc.
* Inclusivity
    * Including differences in how we solve problems, differing views of the
      world
* Focus on People and Relationships
* Asynchronous, Hackable Workflow
* Stoic Management of Conflict
    * Stoicism - level of control of emotion/reactions
    * 7 habits of highly effective people
    * [The obstacle is the way][obstacle-book]
    * [The daily stoic][stoic-book]
* Company Bias in Some Quarters

### New Projects
* Do
    * Define clear personas
    * Build clear on-ramps
    * measure validated participation
    * use socially-acceptable infra (language, CI/CD tooling, etc.)
* Don't
    * Make them private
    * Be distracted by too much infrastructure
    * over govern

### Participation and Engagement
* Do
    * Be inclusive
    * Default to open
    * Handle sensitive issues privately
    * Set clear conduct expectations
    * lead by example
    * provide intrinsic/extrinsic incentives
* Don't
    * Use trad. marketing on developers
    * resort to span/auto signups
    * get distracted
    * depend only on Code of Conduct

### Content Production
* Do
    * Define and service multiple audiences
    * create a content calendar
    * create a content pipeline
    * optimize social media
* Don't
    * overcomplicate content delivery/approvals
    * don't use offensive imagery/terminology
    * focus on unqualified growth
    * buy followers

### Metrics and Performance
* Do
    * Focus on value, not activity
    * optimize for velocity
    * get stakeholder buy-in
    * integrate cadence-based tracking
    * be reactive to trends
* Don't
    * ignore metrics
    * become a data nerd (focus on a few, core metrics)
    * produce uninformed targets
    * track one dimension
    * overcomplicate what you track
    * focus on numbers and not outcomes

### Leadership and Governance
* Do
    * lead by example
    * lead publicly and openly
    * publish governance methodology
    * mentor and support others
    * accept and embrace failure
* Don't
    * overcomplicate governance
    * personalize issues
    * require mediation archives

### Emergencies
* Do
    * Stay calm
    * be open (where appropriate)
    * keep the communication lines open
    * include the community in debugging (GitLab)
    * resolve quickly
    * provide a post-mortem
* Don't
    * loose your cool
    * jump to conclusions
    * close communication channels

## So we have free fonts; now what?
* [Summary][fonts-summary]
* Very interesting/awesome talk, but I really just sat and listened.. It was
  largely an excellent overview of the state of the user experience with free
fonts and what needs to be fixed/addressed to make the experience more viable
for all users

## Git like a Pro
meh.. Well it was fine, but I misunderstood the level of existing knowledge it
was targeted to. So wasn't as useful for me.

## Running Containerized in an on-prem Datacenter
* [Summary][onprem-summary]
* What is a Container Orchestrator
    * Kubernetes/Apache mesos/Cloud Foundry/DC/OS, Docker Swarm
    * From resource perspective -- attempt to manage resources into a single
      resource pool
    * From an application perspective -- a scheduler/dispatcher for requests to
      run workloads that consume the pooled resources
* Why would I want an Orchestrator?
    * there are open source solutions
    * Docker Swarm for apps CI/CD
    * many others, couldn't keep up :)
* Why on prem?
    * you can't afford latency
    * legal data governance
    * need for data ingress preprocessing for local control and notifications
      loops, data reduction
* PaaS(Platform) vs CaaS(Container) vs IaaS(Infrastructure)
    * main distinguishing factor, can I install and manage a DB? (I think is
      what he focused on, need to check his slides/notes once out)
* Most container orchestrator's say they originated from Google's borg
* What is our ideal datacenter?
* Public Cloud vs On-Prem - What's different?
    * Cloud tends to have very nicely designed admin UI's, much better "OOTB"
      than open source equivalents. not that they don't have admin UI's, but
that's part of what you're paying for.
    * Networking is different. Choices are made for you
    * No standardized mandated network ingress/egress service with an API. As
      opposed to AWS which has made those decisions for you
    * On-prem allows you to deal with legacy infrastructure requirements
* 12 factor (VI. Processes)
    * stateless is really just making it "someone else's problem", because
      eventually you need state. In cloud context you can make this their
responsibility, on-prem you own it.
    * this follows the perspective of monolith == bad (same/especially for DB)
* Container advantages make sense for stateful stuff too
    * On-prem, you own posix mountable storage, security, policy, health service
      checks, metrics
* Container Storage Interface
    * attempt at a vendor-neutral specification for storage plugins

[fonts-summary]:https://www.socallinuxexpo.org/scale/16x/presentations/so-we-have-free-web-fonts-now-what#main-content
[onprem-summary]:https://www.socallinuxexpo.org/scale/16x/presentations/running-containerized-workloads-prem-datacenter
[stoic-book]:https://en.wikipedia.org/wiki/The_Daily_Stoic
[obstacle-book]:https://en.wikipedia.org/wiki/The_Obstacle_Is_the_Way
[bacon-summary]:https://www.socallinuxexpo.org/scale/16x/presentations/bacon-flavored-open-source-dos-and-donts
[vmware-haret]:https://github.com/vmware/haret
[attaca-summary]:https://www.socallinuxexpo.org/scale/16x/presentations/attaca-git-esque-version-control-absurd-quantities-data-rust
